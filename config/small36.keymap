#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&sk {
  quick-release;
  release-after-ms = <1000>;
};

/ {
  behaviors {
    tap_sticky: tap_sticky {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      bindings = <&kp>, <&sk>;

      hold-while-undecided;
    };

    multi_sft: multi_sft {
      compatible = "zmk,behavior-tap-dance";
      label = "MULTI_SFT";
      #binding-cells = <0>;
      bindings = <&sk LSHFT>, <&caps_word>;
    };

    dyn_spc: dyn_spc {
      compatible = "zmk,behavior-mod-morph";
      label = "DYN_SPC";
      bindings = <&kp SPACE>, <&hold_morph SPACE UNDERSCORE>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    dot_qm: dot_qm {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_QM";
      bindings = <&kp DOT>, <&kp QMARK>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
    };

    cm_excl: cm_excl {
      compatible = "zmk,behavior-mod-morph";
      label = "CM_EXCL";
      bindings = <&kp COMMA>, <&kp EXCL>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
    };

    par: par {
      compatible = "zmk,behavior-mod-morph";
      label = "PAR";
      bindings = <&kp LPAR>, <&kp RPAR>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
    };

    brc: brc {
      compatible = "zmk,behavior-mod-morph";
      label = "BRC";
      bindings = <&kp LBRC>, <&kp RBRC>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
    };

    bkt: bkt {
      compatible = "zmk,behavior-mod-morph";
      label = "BKT";
      bindings = <&kp LBKT>, <&kp RBKT>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
    };

    tbkt: tbkt {
      compatible = "zmk,behavior-mod-morph";
      label = "TBKT";
      bindings = <&kp LT>, <&kp GT>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
    };

    vkp_eq: vkp_eq {
      compatible = "zmk,behavior-mod-morph";
      label = "VKP_EQ";
      bindings = <&kp EQUAL>, <&kp EQUAL>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
    };

    bk_del: bk_del {
      compatible = "zmk,behavior-mod-morph";
      label = "BK_DEL";
      bindings = <&kp BSPC>, <&kp DEL>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RALT|MOD_RGUI)>;
    };

    base_sel: base_sel {
      compatible = "zmk,behavior-tap-dance";
      label = "BASE_SEL";
      #binding-cells = <0>;
      bindings = <&to 0>, <&to 1>, <&to 2>;
    };

    smart_layer: smart_layer {
      compatible = "zmk,behavior-hold-tap";
      label = "SMART_LAYER";
      bindings = <&mo>, <&sl>;

      #binding-cells = <2>;
      tapping-term-ms = <200>;
    };

    hold_morph: hold_morph {
      compatible = "zmk,behavior-hold-tap";
      label = "HOLD_MORPH";
      bindings = <&kp>, <&kp>;

      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      flavor = "tap-preferred";
    };

    bt_reluctant: bt_reluctant {
      compatible = "zmk,behavior-hold-tap";
      label = "BT_RELUCTANT";
      bindings = <&bt>;
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <500>;
    };
  };

  combos {
    compatible = "zmk,combos";

    public {
      bindings = <&mc_public>;
      key-positions = <3 4>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    private {
      bindings = <&mc_private>;
      key-positions = <3 11>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    protected {
      bindings = <&mc_protected>;
      key-positions = <3 19>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    continue {
      bindings = <&mc_continue>;
      key-positions = <22 7>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    return {
      bindings = <&mc_return>;
      key-positions = <11 13>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    assert {
      bindings = <&mc_assert>;
      key-positions = <10 12 13>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    print {
      bindings = <&mc_print>;
      key-positions = <3 13>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    println {
      bindings = <&mc_println>;
      key-positions = <3 13 6>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    gl_pragma {
      bindings = <&mc_glsl_pragma>;
      key-positions = <3 14>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    counter {
      bindings = <&mc_counter>;
      key-positions = <22 13>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    extra {
      bindings = <&mc_extra>;
      key-positions = <21 13>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    magn {
      bindings = <&mc_magn>;
      key-positions = <15 16>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    multi {
      bindings = <&mc_multi>;
      key-positions = <15 6>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    over {
      bindings = <&mc_over>;
      key-positions = <24 19>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    pseudo {
      bindings = <&mc_pseudo>;
      key-positions = <3 7 17>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    retro {
      bindings = <&mc_retro>;
      key-positions = <11 19 13>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    milli {
      bindings = <&mc_milli>;
      key-positions = <15 18>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    kilo {
      bindings = <&mc_kilo>;
      key-positions = <25 19>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    able {
      bindings = <&mc_able>;
      key-positions = <4 6>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    ance {
      bindings = <&mc_ance>;
      key-positions = <16 22 10>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    ence {
      bindings = <&mc_ence>;
      key-positions = <22 16 17>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    ible {
      bindings = <&mc_ible>;
      key-positions = <4 6 18>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    less {
      bindings = <&mc_less>;
      key-positions = <12 6>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    some {
      bindings = <&mc_some>;
      key-positions = <12 15>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    ward {
      bindings = <&mc_ward>;
      key-positions = <1 23>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    tion {
      bindings = <&mc_tion>;
      key-positions = <16 13>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    tude {
      bindings = <&mc_tude>;
      key-positions = <13 23>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    cause {
      bindings = <&mc_cause>;
      key-positions = <22 12>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    ment {
      bindings = <&mc_ment>;
      key-positions = <15 13>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    about {
      bindings = <&about>;
      key-positions = <10 4>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    have {
      bindings = <&mc_have>;
      key-positions = <24 26>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    ould {
      bindings = <&mc_ould>;
      key-positions = <6 23>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    make {
      bindings = <&mc_make>;
      key-positions = <15 25>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    youre {
      bindings = <&mc_youre>;
      key-positions = <8 11>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    your {
      bindings = <&mc_your>;
      key-positions = <7 11>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    what {
      bindings = <&mc_what>;
      key-positions = <1 10>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    which {
      bindings = <&mc_which>;
      key-positions = <22 26>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    with {
      bindings = <&mc_with>;
      key-positions = <1 18>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    layout {
      bindings = <&mc_layout>;
      key-positions = <6 8>;
      layers = <0>;
      require-prior-idle-ms = <30>;
      slow-release;
    };

    break {
      bindings = <&mc_break>;
      key-positions = <4 25>;
    };
  };

  macros {
    mc_public: mc_public {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp P &kp U &kp B &kp L &kp I &kp C>;
      label = "MC_PUBLIC";
    };

    mc_private: mc_private {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp P &kp R &kp I &kp V &kp A &kp T &kp E>;
      label = "MC_PRIVATE";
    };

    mc_protected: mc_protected {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp P &kp R &kp O &kp T &kp E &kp C &kp T &kp E &kp D>;
      label = "MC_PROTECTED";
    };

    mc_layout: mc_layout {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp L &kp A &kp Y &kp O &kp U &kp T &kp LPAR &kp L &kp O &kp C &kp A &kp T &kp I &kp O &kp N &kp SPACE &kp EQUAL &kp SPACE>;
      label = "MC_LAYOUT";
    };

    mc_continue: mc_continue {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp C &kp O &kp N &kp T &kp I &kp N &kp U &kp E>;
      label = "MC_CONTINUE";
    };

    mc_break: mc_break {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp B &kp R &kp E &kp A &kp K>;
      label = "MC_BREAK";
    };

    mc_return: mc_return {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp R &kp E &kp T &kp U &kp R &kp N>;
      label = "MC_RETURN";
    };

    mc_throw: mc_throw {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp T &kp H &kp R &kp O &kp W>;
      label = "MC_THROW";
    };

    mc_raise: mc_raise {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp R &kp A &kp I &kp S &kp E>;
      label = "MC_RAISE";
    };

    mc_assert: mc_assert {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp A &kp S &kp S &kp E &kp R &kp T>;
      label = "MC_ASSERT";
    };

    mc_print: mc_print {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp P &kp R &kp I &kp N &kp T>;
      label = "MC_PRINT";
    };

    mc_println: mc_println {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp P &kp R &kp I &kp N &kp T &kp L &kp N>;
      label = "MC_PRINTLN";
    };

    mc_stdout: mc_stdout {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp S &kp T &kp D &kp COLON &kp COLON &kp C &kp O &kp U &kp T &kp SPACE &kp LT &kp LT &kp SPACE>;
      label = "MC_STDOUT";
    };

    mc_glsl_pragma: mc_glsl_pragma {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp POUND &kp I &kp F &kp SPACE &kp EXCL &kp D &kp E &kp F &kp I &kp N &kp E &kp D &kp LPAR &kp LS(P) &kp LS(R) &kp LS(A) &kp LS(G) &kp LS(M) &kp LS(A) &kp RIGHT &kp RET &kp POUND &kp D &kp E &kp F &kp I &kp N &kp E &kp SPACE &kp LS(P) &kp LS(R) &kp LS(A) &kp LS(G) &kp LS(M) &kp LS(A) &kp ENTER &kp RET &kp RET &kp RET &kp RET &kp POUND &kp E &kp N &kp D &kp I &kp F &kp SPACE &kp FSLH &kp FSLH &kp SPACE &kp LS(E) &kp LS(O) &kp LS(F) &kp UP &kp UP &kp UP &kp UP &kp LS(LC(RIGHT)) &kp LG(D)>;
      label = "MC_GLSL_PRAGMA";
    };

    mc_version: mc_version {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp V &kp E &kp R &kp S &kp I &kp O &kp N>;
      label = "MC_VERSION";
    };

    mc_counter: mc_counter {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp C &kp O &kp U &kp N &kp T &kp E &kp R>;
      label = "MC_COUNTER";
    };

    mc_extra: mc_extra {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp E &kp X &kp T &kp R &kp A>;
      label = "MC_EXTRA";
    };

    mc_magn: mc_magn {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp M &kp A &kp G &kp N>;
      label = "MC_MAGN";
    };

    mc_micro: mc_micro {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp M &kp I &kp C &kp R &kp O>;
      label = "MC_MICRO";
    };

    mc_multi: mc_multi {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp M &kp U &kp L &kp T &kp I>;
      label = "MC_MULTI";
    };

    mc_over: mc_over {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp O &kp V &kp E &kp R>;
      label = "MC_OVER";
    };

    mc_pseudo: mc_pseudo {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp P &kp S &kp E &kp U &kp D &kp O>;
      label = "MC_PSEUDO";
    };

    mc_retro: mc_retro {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp R &kp E &kp T &kp R &kp O>;
      label = "MC_RETRO";
    };

    mc_milli: mc_milli {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp M &kp I &kp L &kp L &kp I>;
      label = "MC_MILLI";
    };

    mc_kilo: mc_kilo {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp K &kp I &kp L &kp O>;
      label = "MC_KILO";
    };

    mc_able: mc_able {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp A &kp B &kp L &kp E>;
      label = "MC_ABLE";
    };

    mc_ance: mc_ance {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp A &kp N &kp C &kp E>;
      label = "MC_ANCE";
    };

    mc_ence: mc_ence {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp E &kp N &kp C &kp E>;
      label = "MC_ENCE";
    };

    mc_ible: mc_ible {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp I &kp B &kp L &kp E>;
      label = "MC_IBLE";
    };

    mc_ious: mc_ious {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp I &kp O &kp U &kp S>;
      label = "MC_IOUS";
    };

    mc_less: mc_less {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp L &kp E &kp S &kp S>;
      label = "MC_LESS";
    };

    mc_some: mc_some {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp S &kp O &kp M &kp E>;
      label = "MC_SOME";
    };

    mc_ward: mc_ward {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp W &kp A &kp R &kp D>;
      label = "MC_WARD";
    };

    mc_tude: mc_tude {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp T &kp U &kp D &kp E>;
      label = "MC_TUDE";
    };

    mc_cause: mc_cause {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp C &kp A &kp U &kp S &kp E>;
      label = "MC_CAUSE";
    };

    mc_ment: mc_ment {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp M &kp E &kp N &kp T>;
      label = "MC_MENT";
    };

    about: about {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp A &kp B &kp O &kp U &kp T>;
      label = "ABOUT";
    };

    mc_have: mc_have {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp H &kp A &kp V &kp E>;
      label = "MC_HAVE";
    };

    mc_tion: mc_tion {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp T &kp I &kp O &kp N>;
      label = "MC_TION";
    };

    mc_ould: mc_would {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp O &kp U &kp L &kp D>;
      label = "MC_WOULD";
    };

    mc_make: mc_make {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp M &kp A &kp K &kp E>;
      label = "MC_MAKE";
    };

    mc_until: mc_until {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp U &kp N &kp T &kp I &kp L>;
      label = "MC_UNTIL";
    };

    mc_youre: mc_youre {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp Y &kp O &kp U &kp SQT &kp R &kp E>;
      label = "MC_YOURE";
    };

    mc_your: mc_your {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp Y &kp O &kp U &kp R>;
      label = "MC_YOUR";
    };

    mc_what: mc_what {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp W &kp H &kp A &kp T>;
      label = "MC_WHAT";
    };

    mc_which: mc_which {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp W &kp H &kp I &kp C &kp H>;
      label = "MC_WHICH";
    };

    mc_with: mc_with {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp W &kp I &kp T &kp H>;
      label = "MC_WITH";
    };

    mc_auto: mc_auto {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp A &kp U &kp T &kp O>;
      label = "MC_AUTO";
    };

    mc_mono: mc_mono {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp M &kp O &kp N &kp O>;
      label = "MC_MONO";
    };
  };

  keymap {
    compatible = "zmk,keymap";

    COLEMAK {
      bindings = <
        &kp Q  &kp W  &kp F             &kp P                    &kp B        &kp J      &kp L     &kp U             &kp Y    &kp SQT
        &kp A  &kp R  &kp S             &kp T                    &kp G        &kp M      &kp N     &kp E             &kp I    &kp O
        &kp Z  &kp X  &kp C             &kp D                    &kp V        &kp K      &kp H     &cm_excl          &dot_qm  &kp SEMI
                      &smart_layer 4 4  &tap_sticky LSHFT LSHFT  &key_repeat  &kp ENTER  &dyn_spc  &smart_layer 5 5
      >;
    };

    QWERTY {
      bindings = <
        &kp Q  &kp W  &kp E             &kp R      &kp T        &kp Y      &kp U     &kp I             &kp O    &kp P
        &kp A  &kp S  &kp D             &kp F      &kp G        &kp H      &kp J     &kp K             &kp L    &kp SQT
        &kp Z  &kp X  &kp C             &kp V      &kp B        &kp N      &kp M     &cm_excl          &dot_qm  &kp SEMICOLON
                      &smart_layer 4 4  &kp LSHFT  &key_repeat  &kp ENTER  &dyn_spc  &smart_layer 5 5
      >;
    };

    GAMING {
      bindings = <
        &kp TAB     &kp Q  &kp W  &kp E      &kp R  &kp Y  &kp U  &kp I      &kp O    &kp P
        &kp LSHIFT  &kp A  &kp S  &kp D      &kp F  &kp H  &kp J  &kp K      &kp L    &kp SEMICOLON
        &kp LCTRL   &kp Z  &kp X  &kp C      &kp G  &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH
                           &mo 3  &kp SPACE  &kp V  &none  &none  &tog 2
      >;
    };

    GM_NUM {
      bindings = <
        &kp ESC  &kp N7  &kp N8  &kp N9  &kp T   &none   &none   &none   &none  &none
        &kp N0   &kp N4  &kp N5  &kp N6  &kp G   &none   &none   &none   &none  &none
        &kp N0   &kp N1  &kp N2  &kp N3  &kp B   &none   &none   &none   &none  &none
                         &trans  &trans  &trans  &trans  &trans  &trans
      >;
    };

    NAV {
      bindings = <
        &kp ESC                  &kp HOME                 &kp UP                 &kp END                &none      &kp AT       &kp HASH   &kp DOLLAR  &kp PERCENT  &none
        &kp LSHFT                &kp LEFT                 &kp DOWN               &kp RIGHT              &kp TAB    &none        &par       &bkt        &brc         &tbkt
        &tap_sticky LSHFT LSHFT  &tap_sticky LCTRL LCTRL  &tap_sticky LALT LALT  &tap_sticky LGUI LGUI  &kp ENTER  &kp CARET    &vkp_eq    &kp EXCL    &kp AMPS     &kp PIPE
                                                          &trans                 &kp SPACE              &kp ENTER  &key_repeat  &kp UNDER  &trans
      >;
    };

    NUM {
      bindings = <
        &kp GRAVE      &kp PRCNT  &kp DLLR   &kp LPAR   &kp RPAR   &none   &kp N7  &kp N8  &kp N9  &kp BACKSPACE
        &kp LS(CARET)  &kp STAR   &kp PLUS   &vkp_eq    &none      &none   &kp N4  &kp N5  &kp N6  &kp N0
        &none          &kp FSLH   &kp MINUS  &kp DOT    &kp COMMA  &none   &kp N1  &kp N2  &kp N3  &kp N0
                                  &trans     &kp SPACE  &trans     &trans  &trans  &trans
      >;
    };

    EXTRA {
      bindings = <
        &kp TILDE  &kp INS          &kp SCROLLLOCK  &kp PG_UP  &bt_reluctant BT_CLR 0  &none      &kp F7  &kp F8  &kp F9  &kp DEL
        &sk LSHFT  &kp PRINTSCREEN  &kp KP_NUMLOCK  &kp PG_DN  &bt BT_SEL 0            &base_sel  &kp F4  &kp F5  &kp F6  &kp F10
        &sk LSHFT  &kp BSLH         &none           &none      &bt BT_SEL 1            &kp F12    &kp F1  &kp F2  &kp F3  &kp F11
                                    &trans          &trans     &trans                  &trans     &trans  &trans
      >;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    both {
      if-layers = <4 5>;
      then-layer = <6>;
    };
  };
};
